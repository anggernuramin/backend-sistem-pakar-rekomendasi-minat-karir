  // This is your Prisma schema file,
  // learn more about it in the docs: https://pris.ly/d/prisma-schema

  // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
  // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }

  enum Role {
    admin
    client
  }

  model User {
    id String @id @default(uuid())
    email String @unique
    name String
    password String
    image String?
    role Role

    konsultasi Konsultasi[] // satu user bisa melakukan lebih dari 1 konsultasi
    historyKonsultasi HistoriKonsultasi[]
    notification Notification[]

    // token String @db.VarChar(100)  jika ingin spesifik panjang string biasa isinya 100/255
    // first_name // gunakan tanda _ jika terdapat lebih dari 1 kata
    // @@map("users") akan menjadi nama table didatabase
  }

  model Keahlian {
    id String @id 
    name String @unique
    description String

    basisAturan BasisAturan[]
    historyKonsultasi HistoriKonsultasi[]

  }

  model Minat {
    id String @id 
    name String @unique

    basisAturan BasisAturan[]
    historyKonsultasi HistoriKonsultasi[]
  }

  model Karir {
    id String @id 
    name String @unique
    description String
    pengembangan_karir String?

    basisAturan BasisAturan[]
  }

  model BasisAturan {
    id        String    @id 
    certaintyFactor Float
    karirId   String
    karir     Karir     @relation(fields: [karirId], references: [id])
    keahlianId String
    keahlian  Keahlian  @relation(fields: [keahlianId], references: [id])
    minatId   String
    minat     Minat     @relation(fields: [minatId], references: [id])
  }

  model Konsultasi {
    id String @id
    userId String
    user User @relation(fields: [userId], references: [id])
    hasil Json? // jika hasil tidak ada yang cocok maka null
    tanggalKonsultasi DateTime

    historyKonsultasi HistoriKonsultasi[]
  }


// menyimpan minat dan keahlian yang dipilih user, dan menampilkan hasil konsultasi sesuai dengan id konsultasi
 model HistoriKonsultasi {
    id String @id @default(uuid())                
    userId          String
    konsultasiId    String
    minatId         String
    keahlianId      String
    tanggalHistoriKonsultasi       DateTime  

    user            User      @relation(fields: [userId], references: [id]) // satu kode histri konsultasi digunakan untuk menyimpan 1 data user
    konsultasi      Konsultasi @relation(fields: [konsultasiId], references: [id])
    minat           Minat     @relation(fields: [minatId], references: [id])
    keahlian        Keahlian  @relation(fields: [keahlianId], references: [id])
}

model Notification {
  id String @id @default(uuid())
  message String
  status Boolean
  userId String
  tanggal DateTime
  
  user            User      @relation(fields: [userId], references: [id])
}



